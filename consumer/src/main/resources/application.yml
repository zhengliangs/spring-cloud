spring:
  application:
    name: consumer

server:
  port: 8765

eureka:
  client:
    service-url:
      defaultZone: http://eureka1:8760/eureka/,http://eureka2:8761/eureka/,http://eureka3:8762/eureka/
    #作为服务消费者，不提供服务，不应该注册自己
    register-with-eureka: false



#负载均衡策略配置 ribbon（默认轮询）
#provider 为注册中心application 不指定则全局生效，
#测试重试：配置相应超时时间后，在服务提供者处，sleep大于响应超时时间，并打印请求时间，每次请求的间隔时间正好是超时时间
provider:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略
    #请求连接超时时间 单位ms
    ConnectTimeout: 500
    #请求处理的超时时间 单位ms
    ReadTimeout: 2000
    #对所有请求都进行重试 默认false，设定为false的话，只有get请求会重试
    OkToRetryOnAllOperations: true
    #以下配置会重试4次 请求+1 MaxAutoRetries +1 切换实例+1 MaxAutoRetries +1 4次
    #切换实例的重试次数
    MaxAutoRetriesNextServer: 1
    #最大重试次数，当eureka中可以找到服务，但服务连不上的时候将会重试
    MaxAutoRetries: 1

#开启hystrix
feign:
  hystrix:
    enabled: true

#配置hystrix超时  hystrix超时需要 > 重试超时时间(MaxAutoRetries + MaxAutoRetries) * (MaxAutoRetriesNextServer + MaxAutoRetriesNextServer) 总时间
#否则重试没有意义
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 5000
